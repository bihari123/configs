#!/bin/bash

# Monitor Optimizer Script
# Automatically adjusts monitor settings for dark/lit room environments

set -e

# Color codes for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Function to check and install dependencies
check_dependencies() {
    local missing_deps=()
    
    # Check for ddcutil
    if ! command -v ddcutil &> /dev/null; then
        missing_deps+=("ddcutil")
    fi
    
    # Check for redshift (optional but recommended)
    if ! command -v redshift &> /dev/null; then
        missing_deps+=("redshift")
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        echo -e "${YELLOW}Missing dependencies detected: ${missing_deps[*]}${NC}"
        echo -e "Would you like to install them automatically? (y/n): "
        read -n 1 install_deps
        echo
        
        if [[ $install_deps =~ ^[Yy]$ ]]; then
            echo -e "${BLUE}Installing dependencies...${NC}"
            
            # Detect package manager
            if command -v apt-get &> /dev/null; then
                sudo apt-get update
                sudo apt-get install -y "${missing_deps[@]}"
            elif command -v dnf &> /dev/null; then
                sudo dnf install -y "${missing_deps[@]}"
            elif command -v pacman &> /dev/null; then
                sudo pacman -S --noconfirm "${missing_deps[@]}"
            elif command -v zypper &> /dev/null; then
                sudo zypper install -y "${missing_deps[@]}"
            else
                echo -e "${RED}Could not detect package manager${NC}"
                echo "Please install manually: ${missing_deps[*]}"
                exit 1
            fi
            
            # Add user to i2c group for ddcutil permissions
            if id -nG "$USER" | grep -qw i2c; then
                echo -e "${GREEN}User already in i2c group${NC}"
            else
                echo -e "${BLUE}Adding user to i2c group for ddcutil access...${NC}"
                sudo usermod -a -G i2c $USER
                echo -e "${YELLOW}NOTE: You may need to log out and back in for group changes to take effect${NC}"
            fi
            
            # Load i2c-dev module
            if ! lsmod | grep -q i2c_dev; then
                echo -e "${BLUE}Loading i2c-dev module...${NC}"
                sudo modprobe i2c-dev
                # Make it permanent
                echo "i2c-dev" | sudo tee -a /etc/modules > /dev/null
            fi
            
            echo -e "${GREEN}Dependencies installed successfully!${NC}"
        else
            echo -e "${RED}Cannot proceed without required dependencies${NC}"
            exit 1
        fi
    fi
}

# Function to install script to system
install_to_system() {
    local script_path="$(readlink -f "$0")"
    local install_path="/usr/local/bin/monitor-optimizer"
    
    # Check if already installed
    if [ -f "$install_path" ] && [ "$script_path" != "$install_path" ]; then
        echo -e "${YELLOW}Script already installed at $install_path${NC}"
        echo -e "Would you like to update it? (y/n): "
        read -n 1 update_script
        echo
        
        if [[ ! $update_script =~ ^[Yy]$ ]]; then
            return 0
        fi
    fi
    
    # Check if running from /usr/local/bin already
    if [ "$script_path" = "$install_path" ]; then
        return 0
    fi
    
    echo -e "${BLUE}Installing script to system...${NC}"
    
    # Copy script to /usr/local/bin
    if sudo cp "$script_path" "$install_path" 2>/dev/null; then
        sudo chmod +x "$install_path"
        echo -e "${GREEN}Script installed successfully!${NC}"
        echo -e "You can now run '${YELLOW}monitor-optimizer${NC}' from anywhere"
        
        # Create shorter alias
        if sudo ln -sf "$install_path" "/usr/local/bin/mo" 2>/dev/null; then
            echo -e "Also available as '${YELLOW}mo${NC}' for quick access"
        fi
    else
        echo -e "${YELLOW}Could not install to /usr/local/bin, trying /usr/bin...${NC}"
        if sudo cp "$script_path" "/usr/bin/monitor-optimizer" 2>/dev/null; then
            sudo chmod +x "/usr/bin/monitor-optimizer"
            echo -e "${GREEN}Script installed to /usr/bin successfully!${NC}"
            sudo ln -sf "/usr/bin/monitor-optimizer" "/usr/bin/mo" 2>/dev/null
        else
            echo -e "${RED}Failed to install script system-wide${NC}"
            echo -e "You can still run it from the current location"
        fi
    fi
}

# Check dependencies before proceeding
check_dependencies

# Install to system if not already installed
install_to_system

# Function to detect displays
detect_displays() {
    echo -e "${BLUE}Detecting monitors...${NC}"
    DISPLAYS=$(ddcutil detect 2>/dev/null | grep -E "Display [0-9]+" | awk '{print $2}')
    DISPLAY_COUNT=$(echo "$DISPLAYS" | wc -l)
    
    if [ $DISPLAY_COUNT -eq 0 ]; then
        echo -e "${RED}No DDC/CI capable displays found${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}Found $DISPLAY_COUNT display(s)${NC}"
    ddcutil detect 2>/dev/null | grep -E "(Display [0-9]+|Model:|Mfg id:)" | sed 's/^/  /'
}

# Function to apply dark room settings
apply_dark_room() {
    echo -e "\n${YELLOW}Applying dark room settings...${NC}"
    echo "  Brightness: 12%"
    echo "  Contrast: 60%"
    
    for display in $DISPLAYS; do
        echo -e "  ${BLUE}Configuring Display $display...${NC}"
        ddcutil setvcp 10 12 --display $display 2>/dev/null
        ddcutil setvcp 12 60 --display $display 2>/dev/null
    done
    
    # Apply redshift if available
    if command -v redshift &> /dev/null; then
        echo -e "  ${BLUE}Applying blue light filter (3400K)...${NC}"
        killall redshift 2>/dev/null || true
        redshift -P -O 3400 -b 0.85 -m randr &>/dev/null
    fi
    
    echo -e "${GREEN}Dark room settings applied!${NC}"
}

# Function to apply lit room settings
apply_lit_room() {
    echo -e "\n${YELLOW}Applying well-lit room settings...${NC}"
    echo "  Brightness: 70%"
    echo "  Contrast: 75%"
    
    for display in $DISPLAYS; do
        echo -e "  ${BLUE}Configuring Display $display...${NC}"
        ddcutil setvcp 10 70 --display $display 2>/dev/null
        ddcutil setvcp 12 75 --display $display 2>/dev/null
    done
    
    # Reset redshift if available
    if command -v redshift &> /dev/null; then
        echo -e "  ${BLUE}Resetting color temperature...${NC}"
        killall redshift 2>/dev/null || true
        redshift -x &>/dev/null
    fi
    
    echo -e "${GREEN}Well-lit room settings applied!${NC}"
}

# Function to show current settings
show_current() {
    echo -e "\n${YELLOW}Current monitor settings:${NC}"
    for display in $DISPLAYS; do
        echo -e "\n  ${BLUE}Display $display:${NC}"
        ddcutil getvcp 10 12 --display $display 2>/dev/null | grep -E "(Brightness|Contrast)" | sed 's/^/    /'
    done
}

# Function to save profile
save_profile() {
    local profile_name=$1
    local config_dir="$HOME/.config/monitor-optimizer"
    mkdir -p "$config_dir"
    
    echo "PROFILE=$profile_name" > "$config_dir/current_profile"
    echo -e "${GREEN}Profile saved: $profile_name${NC}"
}

# Function to load last profile
load_profile() {
    local config_file="$HOME/.config/monitor-optimizer/current_profile"
    if [ -f "$config_file" ]; then
        source "$config_file"
        echo -e "${BLUE}Last used profile: $PROFILE${NC}"
        return 0
    fi
    return 1
}

# Main menu
main_menu() {
    clear
    echo -e "${YELLOW}=== Monitor Optimizer ===${NC}"
    echo
    detect_displays
    echo
    
    # Check for saved profile
    if load_profile; then
        echo -e "\nApply last used profile ($PROFILE)? (y/n): "
        read -n 1 apply_last
        echo
        if [[ $apply_last =~ ^[Yy]$ ]]; then
            if [ "$PROFILE" = "dark" ]; then
                apply_dark_room
            else
                apply_lit_room
            fi
            save_profile "$PROFILE"
            exit 0
        fi
    fi
    
    echo -e "\n${YELLOW}Select your environment:${NC}"
    echo "1) Dark room (low light)"
    echo "2) Well-lit room"
    echo "3) Show current settings"
    echo "4) Exit"
    echo
    read -p "Enter your choice (1-4): " choice
    
    case $choice in
        1)
            apply_dark_room
            save_profile "dark"
            ;;
        2)
            apply_lit_room
            save_profile "lit"
            ;;
        3)
            show_current
            echo -e "\nPress any key to continue..."
            read -n 1
            main_menu
            ;;
        4)
            echo -e "${GREEN}Goodbye!${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}Invalid choice${NC}"
            sleep 2
            main_menu
            ;;
    esac
}

# Quick switch mode (for command line arguments)
if [ "$1" = "dark" ]; then
    detect_displays > /dev/null 2>&1
    apply_dark_room
    save_profile "dark"
    exit 0
elif [ "$1" = "lit" ] || [ "$1" = "light" ]; then
    detect_displays > /dev/null 2>&1
    apply_lit_room
    save_profile "lit"
    exit 0
elif [ "$1" = "status" ]; then
    detect_displays > /dev/null 2>&1
    show_current
    exit 0
elif [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    echo "Monitor Optimizer - Adjust monitor settings for different environments"
    echo
    echo "Usage:"
    echo "  $0          - Interactive mode"
    echo "  $0 dark     - Quick switch to dark room settings"
    echo "  $0 lit      - Quick switch to lit room settings"
    echo "  $0 status   - Show current settings"
    echo "  $0 --help   - Show this help"
    exit 0
fi

# Run main menu
main_menu
